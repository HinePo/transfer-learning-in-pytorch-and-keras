# -*- coding: utf-8 -*-
"""ResNet, VGG - Pre-trained models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZSTya3_b_3y7e34-5SBU7Uvh7zj2zJVu
"""

from torchvision import datasets, transforms, models
import torch
import torch.nn as nn

"""# Pre-trained PyTorch models (torchvision.models)

Pre-trained models available: https://pytorch.org/docs/stable/torchvision/models.html

## ResNet
"""

resnet = models.resnet152(pretrained=True) # define model and weights
print(resnet)

resnet.layer4

resnet_no_head = torch.nn.Sequential(*(list(resnet.children())[:-1])) # remove last layer
print(resnet_no_head)

"""### Change top layer"""

# resnet.children
resnet.modules

resnet.bn1

resnet.fc

for param in resnet.parameters():
    param.require_grad = False

del resnet.fc # Remove last layer

resnet.fc = nn.Sequential(nn.Linear(2048, 1024), nn.ReLU(), nn.Dropout(p=0.2),
                          nn.Linear(1024, 1024), nn.ReLU(), nn.Dropout(p=0.2),
                          nn.Linear(1024, 264)) # 264 classes

resnet.fc

resnet # resnet - head + top layer (sequential)

"""## VGG"""

vgg = models.vgg16_bn(pretrained=True) # define model and weights
print(vgg)

# as shown by the output above, the fully connected layer (head/top) of VGG is called 'classifier'
# in Resnet, the last layer is called 'fc'

vgg.classifier

num_features = vgg.classifier[6].in_features
num_features

"""### Change top layer"""

for param in vgg.features.parameters():
    param.require_grad = False
    
    
num_features = vgg.classifier[6].in_features # 4096, see layers indexes above
features = list(vgg.classifier.children())[:-1] # Remove last layer
features.extend([nn.Linear(num_features, 264)]) # Add our layer with my output classes / add member [] to the list features; can change nn.Linear por nn.Sequential to add many layer, relu, dropout..
vgg.classifier = torch.nn.Sequential(*features) # Replace the model classifier

print(vgg) # print sequential (vgg model - last layer + head)

vgg.classifier[6].out_features

"""# Pre-trained Keras models

Pre-trained models on Keras: https://keras.io/api/applications/
"""

from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, InputLayer
from keras.models import Sequential
from keras import optimizers
from keras.applications.resnet50 import ResNet50
from keras.models import Model
import keras

IMG_HEIGHT,IMG_WIDTH = 224,224

""""Weights are downloaded automatically when instantiating a model.""""

# import model without head/top. load weights
resnet_keras = ResNet50(include_top=False, weights='imagenet', input_shape=(IMG_HEIGHT,IMG_WIDTH,3))
# model = VGG16(weights='imagenet', include_top=False) for VGG16

resnet_keras

restnet_keras.name

resnet_keras.summary()

# FREEZE PARAMETERS BEFORE ADDING NEW TOP LAYER
for layer in restnet_keras.layers:
    layer.trainable = False

# construct new model (resnet - top + sequential)
model = Sequential()
model.add(restnet_keras) # resnet
model.add(Dense(1024, activation='relu', input_dim=(IMG_HEIGHT,IMG_WIDTH,3)))
model.add(Dropout(0.3))
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(264, activation='sigmoid')) # number of classes
model.compile(loss='binary_crossentropy',
              optimizer=optimizers.RMSprop(lr=2e-5),
              metrics=['f1_score'])

model.summary() # resnet- top + sequential